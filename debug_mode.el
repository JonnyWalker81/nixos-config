;; Debug mode detection
(defun debug-mode-info ()
  "Print detailed mode information for debugging"
  (interactive)
  (with-current-buffer (get-buffer-create "*Debug Mode Info*")
    (erase-buffer)
    (insert "=== MODE DEBUG INFO ===\n\n")
    (insert (format "Major mode: %s\n" major-mode))
    (insert (format "Buffer name: %s\n" (buffer-name)))
    (insert (format "Buffer file: %s\n" (or buffer-file-name "None")))
    (insert (format "Auto-mode-alist entries for JS:\n"))
    (dolist (entry auto-mode-alist)
      (when (string-match-p "js\\|javascript" (format "%s" entry))
        (insert (format "  %s\n" entry))))
    (insert (format "\nAvailable modes:\n"))
    (insert (format "  js-mode: %s\n" (fboundp 'js-mode)))
    (insert (format "  javascript-mode: %s\n" (fboundp 'javascript-mode)))
    (insert (format "  js2-mode: %s\n" (fboundp 'js2-mode)))
    (insert (format "  rjsx-mode: %s\n" (fboundp 'rjsx-mode)))
    (insert (format "  typescript-mode: %s\n" (fboundp 'typescript-mode)))
    (insert (format "\nDoom info:\n"))
    (insert (format "  doom-version: %s\n" (if (boundp 'doom-version) doom-version "NOT BOUND")))
    (insert (format "  doom-modules: %s\n" (if (boundp 'doom-modules) (length doom-modules) "NOT BOUND")))
    (insert (format "\nFeatures loaded:\n"))
    (let ((js-features (seq-filter (lambda (f) (string-match-p "js\\|javascript\\|doom" (symbol-name f))) features)))
      (dolist (f js-features)
        (insert (format "  %s\n" f))))
    (display-buffer (current-buffer))))

;; Test what happens when we open a JS file
(find-file "test.js")
(debug-mode-info)